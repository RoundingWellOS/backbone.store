{"version":3,"file":null,"sources":["../lib/model-cache.js","../lib/index.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\n\n/*\n * Encapsulates a cache for a single model.\n */\nfunction ModelCache(Model, modelName) {\n  this.instances = {};\n  this.Model = Model;\n  this.modelName = modelName;\n  this.modelConstructor = this._getConstructor(Model);\n}\n\n_.extend(ModelCache.prototype, {\n\n  _getConstructor(Model) {\n    const cache = this;\n\n    const modelConstructor = function(attrs, options) {\n      return cache.get(attrs, options);\n    };\n\n    // Extend Model's static properties onto new\n    _.extend(modelConstructor, Model, Backbone.Events);\n\n    // Backbone collections need prototype of wrapped class\n    modelConstructor.prototype = this.Model.prototype;\n\n    return modelConstructor;\n  },\n\n  // Override for different casting options\n  getId(id) {\n    // Return a string id\n    return id && String(id);\n  },\n\n  get(attrs, options) {\n    const id = this.getId(attrs && attrs[this.Model.prototype.idAttribute]);\n\n    // Attempt to restore a locally cached instance\n    const instance = this.instances[id];\n\n    if (!instance) {\n      // If we haven't seen this instance before, start caching it\n      return this.new(attrs, options);\n    }\n\n    // Otherwise update the attributes of the cached instance\n    instance.set(attrs, options);\n\n    return instance;\n  },\n\n  new(attrs, options) {\n    const instance = new this.Model(attrs, options);\n\n    if (instance.isNew()) {\n      // Store the instance if we get an id after instantation\n      instance.once(`change:${ instance.idAttribute }`, this.add, this);\n    } else {\n      this.add(instance);\n    }\n\n    instance.on('destroy', this.remove, this);\n\n    return instance;\n  },\n\n  add(instance) {\n    const id = this.getId(instance.id)\n\n    // If the instance is not already stored, store it\n    if (!this.instances[id]) this.instances[id] = instance;\n\n    return instance;\n  },\n\n  remove(instance) {\n    const id = this.getId(instance.id);\n\n    // Stop tracking this model; otherwise mem leak (there are other\n    // sources of memory leaks we need to address, but hey, here's one)\n    if (this.instances[id]) delete this.instances[id];\n\n    return instance;\n  }\n});\n\nexport default ModelCache;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\n\nimport ModelCache from './model-cache';\n\nconst Models = {};\n\n/**\n * Store wrapper converts regular Backbone models into unique ones.\n *\n * Example:\n *   const UniqueUser = Store(User);\n */\nfunction Store(Model, modelName = _.uniqueId('Store_')) {\n  const ModelCache = Store.add(Model, modelName);\n\n  return ModelCache.modelConstructor;\n}\n\n// Static functions\n_.extend(Store, {\n  ModelCache,\n\n  get(modelName) {\n    if (!Models[modelName]) throw `Unrecognized Model: ${ modelName }`;\n\n    return Models[modelName];\n  },\n\n  add(Model, modelName) {\n    if (!modelName) throw 'Model name required!';\n\n    if (Models[modelName]) return Models[modelName];\n\n    return Models[modelName] = new Store.ModelCache(Model, modelName);\n  },\n\n  remove(modelName) {\n    delete Models[modelName];\n  },\n\n  clear() {\n    for (let modelName in Models) this.remove(modelName);\n  }\n});\n\nBackbone.Store = Store;\n\nexport default Store;\n"],"names":["ModelCache","Model","modelName","instances","modelConstructor","_getConstructor","_","extend","prototype","cache","attrs","options","get","Backbone","Events","id","String","getId","idAttribute","instance","new","set","isNew","once","add","on","remove","Models","Store","uniqueId"],"mappings":";;;AAGA;;;AAGA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,SAA3B,EAAsC;OAC/BC,SAAL,GAAiB,EAAjB;OACKF,KAAL,GAAaA,KAAb;OACKC,SAAL,GAAiBA,SAAjB;OACKE,gBAAL,GAAwB,KAAKC,eAAL,CAAqBJ,KAArB,CAAxB;;;AAGFK,EAAEC,MAAF,CAASP,WAAWQ,SAApB,EAA+B;iBAAA,2BAEbP,KAFa,EAEN;QACfQ,QAAQ,IAAd;;QAEML,mBAAmB,SAAnBA,gBAAmB,CAASM,KAAT,EAAgBC,OAAhB,EAAyB;aACzCF,MAAMG,GAAN,CAAUF,KAAV,EAAiBC,OAAjB,CAAP;KADF;;;MAKEJ,MAAF,CAASH,gBAAT,EAA2BH,KAA3B,EAAkCY,SAASC,MAA3C;;;qBAGiBN,SAAjB,GAA6B,KAAKP,KAAL,CAAWO,SAAxC;;WAEOJ,gBAAP;GAf2B;;;;OAAA,iBAmBvBW,EAnBuB,EAmBnB;;WAEDA,MAAMC,OAAOD,EAAP,CAAb;GArB2B;KAAA,eAwBzBL,KAxByB,EAwBlBC,OAxBkB,EAwBT;QACZI,KAAK,KAAKE,KAAL,CAAWP,SAASA,MAAM,KAAKT,KAAL,CAAWO,SAAX,CAAqBU,WAA3B,CAApB,CAAX;;;QAGMC,WAAW,KAAKhB,SAAL,CAAeY,EAAf,CAAjB;;QAEI,CAACI,QAAL,EAAe;;aAEN,KAAKC,GAAL,CAASV,KAAT,EAAgBC,OAAhB,CAAP;;;;aAIOU,GAAT,CAAaX,KAAb,EAAoBC,OAApB;;WAEOQ,QAAP;GAtC2B;KAAA,gBAyCzBT,KAzCyB,EAyClBC,OAzCkB,EAyCT;QACZQ,WAAW,IAAI,KAAKlB,KAAT,CAAeS,KAAf,EAAsBC,OAAtB,CAAjB;;QAEIQ,SAASG,KAAT,EAAJ,EAAsB;;eAEXC,IAAT,aAAyBJ,SAASD,WAAlC,EAAkD,KAAKM,GAAvD,EAA4D,IAA5D;KAFF,MAGO;WACAA,GAAL,CAASL,QAAT;;;aAGOM,EAAT,CAAY,SAAZ,EAAuB,KAAKC,MAA5B,EAAoC,IAApC;;WAEOP,QAAP;GArD2B;KAAA,eAwDzBA,QAxDyB,EAwDf;QACNJ,KAAK,KAAKE,KAAL,CAAWE,SAASJ,EAApB,CAAX;;;QAGI,CAAC,KAAKZ,SAAL,CAAeY,EAAf,CAAL,EAAyB,KAAKZ,SAAL,CAAeY,EAAf,IAAqBI,QAArB;;WAElBA,QAAP;GA9D2B;QAAA,kBAiEtBA,QAjEsB,EAiEZ;QACTJ,KAAK,KAAKE,KAAL,CAAWE,SAASJ,EAApB,CAAX;;;;QAII,KAAKZ,SAAL,CAAeY,EAAf,CAAJ,EAAwB,OAAO,KAAKZ,SAAL,CAAeY,EAAf,CAAP;;WAEjBI,QAAP;;CAxEJ,EA4EA;;ACpFA,IAAMQ,SAAS,EAAf;;;;;;;;AAQA,SAASC,KAAT,CAAe3B,KAAf,EAAwD;MAAlCC,SAAkC,uEAAtBI,EAAEuB,QAAF,CAAW,QAAX,CAAsB;;MAChD7B,gBAAa4B,MAAMJ,GAAN,CAAUvB,KAAV,EAAiBC,SAAjB,CAAnB;;SAEOF,cAAWI,gBAAlB;;;;AAIFE,EAAEC,MAAF,CAASqB,KAAT,EAAgB;wBAAA;;KAAA,eAGV1B,SAHU,EAGC;QACT,CAACyB,OAAOzB,SAAP,CAAL,EAAwB,+BAA8BA,SAA9B;;WAEjByB,OAAOzB,SAAP,CAAP;GANY;KAAA,eASVD,KATU,EASHC,SATG,EASQ;QAChB,CAACA,SAAL,EAAgB,MAAM,sBAAN;;QAEZyB,OAAOzB,SAAP,CAAJ,EAAuB,OAAOyB,OAAOzB,SAAP,CAAP;;WAEhByB,OAAOzB,SAAP,IAAoB,IAAI0B,MAAM5B,UAAV,CAAqBC,KAArB,EAA4BC,SAA5B,CAA3B;GAdY;QAAA,kBAiBPA,SAjBO,EAiBI;WACTyB,OAAOzB,SAAP,CAAP;GAlBY;OAAA,mBAqBN;SACD,IAAIA,SAAT,IAAsByB,MAAtB;WAAmCD,MAAL,CAAYxB,SAAZ;;;CAtBlC;;AA0BAW,SAASe,KAAT,GAAiBA,KAAjB,CAEA;;"}